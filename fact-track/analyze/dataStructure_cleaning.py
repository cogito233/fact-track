import pandas as pd
import os
# os.environ["CUDA_VISIBLE_DEVICES"] = "6,7"
import ray
ray.init()


def save2file(df_dict, filename):
    df = pd.DataFrame(df_dict)
    df.to_csv(filename, index=False)

def generate_factID(metaname, plot_id, fact, fact_type):
    import hashlib
    if fact_type != "prefact" and fact_type != "postfact":
        raise Exception("fact_type must be prefact or postfact")
    if isinstance(plot_id, float) and int(plot_id) == plot_id:
        plot_id = str(int(plot_id))
    else:
        plot_id = str(plot_id)
    fact_key = hashlib.md5((metaname + "_" + plot_id + "_" + fact + "_" + fact_type).encode('utf-8')).hexdigest()
    fact_key = fact_key[:32]
    return fact_key

def generate_metaContent(metanameList, output_path, suffix = "_detect_gpt3"):
    # 关于outline的基本信息
    if not os.path.exists(output_path):
        # then create the folder
        os.makedirs(output_path)
    plot_dict = {"plot_id":[], "outline_id":[], "plot_content":[]}
    fact_dict = {"plot_id":[], "outline_id":[], "fact_key":[], "fact_content":[], "l":[], "r":[], "fact_type":[]}
    fact_contradict = {"fact1_key":[], "fact2_key":[], "nli_score":[], "contradict":[], "fact1_content":[], "fact2_content":[]}
    plot_contradict_temp = {"plot1_id":[], "plot2_id":[], "outline_id":[]}
    for metaname in metanameList:
        from postAnno_parsing import load_outline
        export_dict = load_outline(metaname + suffix)
        print(export_dict.keys())
        # exit(0)
        try:
            outline = export_dict['outline']
            contradictDetector = export_dict['detector']
        except:
            continue
        # 1. get plot pair template
        from convert_dataTemplate import outline2idxs, outline_idx2text
        idxs = outline2idxs(outline)
        # sort idxs
        idxs = sorted(idxs)
        for i in range(len(idxs)):
            for j in range(i+1, len(idxs)):
                plot_contradict_temp["plot1_id"].append(idxs[i])
                plot_contradict_temp["plot2_id"].append(idxs[j])
                plot_contradict_temp["outline_id"].append(metaname)
        # print(idxs)
        # print(plot_contradict_temp)
        # exit(0)
        # 2. get plot content
        dict_idx2text = outline_idx2text(outline)
        for i in idxs:
            plot_dict["plot_id"].append(i)
            plot_dict["outline_id"].append(metaname)
            plot_dict["plot_content"].append(dict_idx2text[i])
        # Fact key generated by hash value of {metaname}_{plot_id}_{fact_content}_{type}
        # 3. get fact content
        for prefact in contradictDetector.prefactList:
            # (fact, embedding, l, r, sourcePlot_idx), sorted by l
            # print(prefact)
            fact, _, l, r, plot_id, plot_text = prefact
            fact_dict["plot_id"].append(plot_id)
            fact_dict["outline_id"].append(metaname)
            import hashlib
            fact_key = hashlib.md5((metaname + "_" + str(plot_id) + "_" + fact + "_" + "prefact").encode('utf-8')).hexdigest()
            fact_key = fact_key[:32]
            fact_dict["fact_key"].append(fact_key)
            fact_dict["fact_content"].append(fact)
            fact_dict["l"].append(l)
            fact_dict["r"].append(r)
            fact_dict["fact_type"].append("prefact")
        for postfact in contradictDetector.postfactList:
            # (fact, embedding, l, r, sourcePlot_idx), sorted by l
            fact, _, l, r,  plot_id, plot_text = postfact
            fact_dict["plot_id"].append(plot_id)
            fact_dict["outline_id"].append(metaname)
            import hashlib
            fact_key = hashlib.md5((metaname + "_" + str(plot_id) + "_" + fact + "_" + "postfact").encode('utf-8')).hexdigest()
            fact_key = fact_key[:32]
            fact_dict["fact_key"].append(fact_key)
            fact_dict["fact_content"].append(fact)
            fact_dict["l"].append(l)
            fact_dict["r"].append(r)
            fact_dict["fact_type"].append("postfact")
        # 4. get fact contradict info
        # We will use the information inside the contradict_list in contradict detector
        for i in range(len(contradictDetector.contradict_list['fact1'])):
            if not contradictDetector.contradict_list['is_query'][i]:
                continue
            if contradictDetector.contradict_list['where'][i] != "checkContradict":
                # Only keep the information of checkContradict
                continue
            fact1_content = contradictDetector.contradict_list['fact1'][i]
            fact2_content = contradictDetector.contradict_list['fact2'][i]
            idx1 = contradictDetector.contradict_list['plot1_idx'][i]
            idx2 = contradictDetector.contradict_list['plot2_idx'][i]
            label = contradictDetector.contradict_list['label'][i]
            nli_score = contradictDetector.contradict_list['nli_score'][i]
            print(fact1_content, fact2_content, idx1, idx2, label, nli_score)
            # exit(0)
            if idx1 > idx2:
                idx1, idx2 = idx2, idx1
                fact1_content, fact2_content = fact2_content, fact1_content
            fact1_fullContent = f"{metaname}_{idx1}_{fact1_content}_postfact"
            fact2_fullContent = f"{metaname}_{idx2}_{fact2_content}_prefact"
            import hashlib
            fact1_key = hashlib.md5(fact1_fullContent.encode('utf-8')).hexdigest()[0:32]
            fact2_key = hashlib.md5(fact2_fullContent.encode('utf-8')).hexdigest()[0:32]
            fact_contradict["fact1_key"].append(fact1_key)
            fact_contradict["fact2_key"].append(fact2_key)
            fact_contradict["nli_score"].append(nli_score)
            fact_contradict["contradict"].append(label)
            fact_contradict["fact1_content"].append(fact1_fullContent)
            fact_contradict["fact2_content"].append(fact2_fullContent)
    save2file(plot_dict, output_path + "plot.csv")
    save2file(fact_dict, output_path + "fact.csv")
    save2file(fact_contradict, output_path + "fact_contradict.csv")
    save2file(plot_contradict_temp, output_path + "plot_contradict_temp.csv")

def check_fact_pairs(plot_idx1, plot_idx2, outline_id, fact_info_df): # Return a fact pair list: fact1_id, fact2_id, time_relationship
        def compute_time_relationship(l1, r1, l2, r2):
            # one of "overlap", "partially overlap", "blocked"
            if l2 < l1 and l1 < r2 and r2 < r1:
                return "overlap"
            elif l1 < r1 and r1 < l1 and l2 < r2:
                return "blocked"
            else:
                return "partially overlap"
        fact_info_df = fact_info_df[fact_info_df['outline_id'] == outline_id]
        facts_plot1 = fact_info_df[fact_info_df['plot_id'] == plot_idx1]
        facts_plot1 = facts_plot1[facts_plot1['fact_type'] == 'postfact']
        facts_plot2 = fact_info_df[fact_info_df['plot_id'] == plot_idx2]
        facts_plot2 = facts_plot2[facts_plot2['fact_type'] == 'prefact']
        # if plot_idx1 == "1.1.1" and plot_idx2 == "1.1.3":
        #     print("debug")
        #     print(facts_plot1)
        #     print(facts_plot2)
        #     exit(0)
        fact_pairs_dict = {"fact1_id":[], "fact2_id":[], "time_relationship":[]}
        for idx1, fact1 in facts_plot1.iterrows():
            # Iterate through the rows of the second DataFrame
            for idx2, fact2 in facts_plot2.iterrows():
                # print(fact1, fact2)
                fact1_id = fact1['fact_key']
                fact2_id = fact2['fact_key']
                l1, r1 = fact1['l'], fact1['r']
                l2, r2 = fact2['l'], fact2['r']
                # if fact1_id == "7108747025732c4b5b3372c4f4ea7743" and fact2_id == "9cb4d0c16ff971dc2f0c277a428e70ab":
                #     print("debug")
                #     print(l1, r1, l2, r2)
                #     exit(0)
                time_relationship = compute_time_relationship(l1, r1, l2, r2)
                fact_pairs_dict["fact1_id"].append(fact1_id)
                fact_pairs_dict["fact2_id"].append(fact2_id)
                fact_pairs_dict["time_relationship"].append(time_relationship)
        # print(fact_pairs_dict)
        return fact_pairs_dict

def generate_plotContradictPred(metanameList, output_path):
    # {"contradict", "ignore", "blocked", "not contradict", "undefined", "invalid"}
    # template_path = output_path + "pl"
    # this is used to check the all plot pair status give the current detection result
    # select all plot pairs, and get two fact list, and then make comparsion?
    # (should we) also generate a list of fact_pairs?
    plot_temp_path = output_path + "plot_contradict_temp.csv"
    plot_temp_df = pd.read_csv(plot_temp_path) # plot1_id, plot2_id

    fact_info_path = output_path + "fact.csv"
    fact_info_df = pd.read_csv(fact_info_path) # plot_id,outline_id,fact_key,fact_content,l,r,fact_type

    fact_contradict_path = output_path + "fact_contradict.csv"
    fact_contradict_df = pd.read_csv(fact_contradict_path) # fact1_key,fact2_key,nli_score,contradict,fact1_content,fact2_content
    # print(len(fact_contradict_df))
    fact_contradict_dict = {} # Use the dict to accelerate the query
    for idx, row in fact_contradict_df.iterrows():
        fact_contradict_dict[row["fact1_key"] + "_" + row["fact2_key"]] = row["contradict"]
        if row["contradict"] == True or row["contradict"] == "True":
            fact_contradict_dict[row["fact1_key"] + "_" + row["fact2_key"]] = "contradict"
        elif row["contradict"] == False or row["contradict"] == "False":
            fact_contradict_dict[row["fact1_key"] + "_" + row["fact2_key"]] = "not contradict"
    # print(fact_contradict_dict)
    # print(len(fact_contradict_dict))
    # exit(0)
    dict_result = {"plot1_id":[], "plot2_id":[], "outline_id":[], "type_byPred":[]} # one in contradict, ignored and not contradict
    fact_pair_resultDict = {"fact1_id":[], "fact2_id":[], "time_relationship":[], "status":[]}

    for metaname in metanameList:
        plot_pair = plot_temp_df[plot_temp_df['outline_id'] == metaname] # plot1_id, plot2_id, outline_id
        for idx, row in plot_pair.iterrows():
            plot_id1, plot_id2 = row['plot1_id'], row['plot2_id']
            # if is is contain relationship, then it is "ignored"
            if plot_id1.startswith(plot_id2) or plot_id2.startswith(plot_id1):
                dict_result["type_byPred"].append("invalid")
                dict_result["plot1_id"].append(plot_id1)
                dict_result["plot2_id"].append(plot_id2)
                dict_result["outline_id"].append(metaname)
                continue
            fact_pairs_dict = check_fact_pairs(plot_id1, plot_id2, metaname, fact_info_df)
            fact_pairs_df = pd.DataFrame(fact_pairs_dict)
            fact_pairs_dict['status'] = [] # one of "contradict", "not contradict", "unknown", or "contradict_afterDetection"
            for idx, row in fact_pairs_df.iterrows():
                fact1_id, fact2_id, time_relationship = row['fact1_id'], row['fact2_id'], row['time_relationship']
                fact_pair_key = fact1_id + "_" + fact2_id
                if fact_pair_key in fact_contradict_dict:
                    status = fact_contradict_dict[fact_pair_key]
                else:
                    status = "unknown"
                # if fact1_id == "7108747025732c4b5b3372c4f4ea7743" and fact2_id == "9cb4d0c16ff971dc2f0c277a428e70ab":
                #     print("debug")
                #     print(status)
                #     exit(0)
                fact_pairs_dict['status'].append(status)
            # Find one in the 5 status, "contradict", "ignored", "blocked", "not contradict", "unknown"
            # "contradict" means time_relationship = "overlap" and status = "contradict" exist
            # "ignored" means time_relationship = "overlap" and status = "contradict_afterDetection" exist
            # "blocked" means time_relationship != "overlap" and status = "contradict"/"contradict_afterDetection" exist
            # "not contradict" means forall status = "not contradict" exist
            # otherwise, "unknown"
            df_factPairs = pd.DataFrame(fact_pairs_dict)
            overlap_df = df_factPairs[df_factPairs['time_relationship'] == "overlap"]
            nonoverlap_df = df_factPairs[df_factPairs['time_relationship'] != "overlap"]
            # number of contradict facts
            # print(len(df_factPairs[df_factPairs['status'] == "contradict"]))
            # if plot_id1 == "3.2" and plot_id2 == "3.3.1":
            #     print("debug")
            #     print(len(df_factPairs))
            #     print(len(overlap_df))
            #     print(len(nonoverlap_df))
            #     print(overlap_df)
            #     exit(0)
            if len(overlap_df[overlap_df['status'] == "contradict"]) > 0:
                dict_result["type_byPred"].append("contradict")
            elif len(overlap_df[overlap_df['status'] == "contradict afterDetection"]) > 0:
                dict_result["type_byPred"].append("ignored")
            elif len(nonoverlap_df[nonoverlap_df['status'] == "contradict"]) + len(nonoverlap_df[nonoverlap_df['status'] == "contradict afterDetection"]) > 0:
                dict_result["type_byPred"].append("blocked")
            elif len(df_factPairs[df_factPairs['status'] == "not contradict"]) == len(df_factPairs):
                dict_result["type_byPred"].append("not contradict")
            else:
                dict_result["type_byPred"].append("unknown")

            dict_result["plot1_id"].append(plot_id1)
            dict_result["plot2_id"].append(plot_id2)
            dict_result["outline_id"].append(metaname)
            fact_pair_resultDict["fact1_id"].extend(fact_pairs_dict["fact1_id"])
            fact_pair_resultDict["fact2_id"].extend(fact_pairs_dict["fact2_id"])
            fact_pair_resultDict["time_relationship"].extend(fact_pairs_dict["time_relationship"])
            fact_pair_resultDict["status"].extend(fact_pairs_dict["status"])

    save2file(dict_result, output_path + "plot_contradict_pred.csv")
    # Print the distribution of type_byPred
    print("type_byPred distribution:")
    print(pd.Series(dict_result["type_byPred"]).value_counts())
    save2file(fact_pair_resultDict, output_path + "fact_contradict_pred.csv")

def generate_plotContradictAnno(metanameList, output_path):
    # {"contradict", "not contradict", "invalid"}
    # plot_path = output_path + "plot.csv"
    # plot_df = pd.read_csv(plot_path) # plot_id, outline_id, plot_content
    plot_temp_path = output_path + "plot_contradict_temp.csv"
    plot_temp_df = pd.read_csv(plot_temp_path) # plot1_id, plot2_id
    dict_result = {"plot1_id":[], "plot2_id":[], "outline_id":[], "type_byAnno":[]} # one in contradict, ignored and not contradict
    for metaname in metanameList:
        path = f"/home/yangk/zhiheng/develop_codeversion/fact-track/dataPostAnno/{metaname}_allPairAnno.csv"
        plot_pair = plot_temp_df[plot_temp_df['outline_id'] == metaname] # plot1_id, plot2_id, outline_id
        df_allPairAnno = pd.read_csv(path) # id1,id2,key,source,type
        # print(f"plot_pair: {plot_pair}")
        list_anno = [] # id1, id2
        for i in range(len(df_allPairAnno)): # the annotation result that pairs is contradicted
            id1, id2, key, source, type = df_allPairAnno.iloc[i]
            # print(id1, id2, key, source, type)
            if isinstance(id1, float) and int(id1) == id1:
                id1 = str(int(id1))
            else:
                id1 = str(id1)
            if isinstance(id2, float) and int(id2) == id2:
                id2 = str(int(id2))
            else:
                id2 = str(id2)
            # id1 = __builtins__.str(int(id1)) if type(id1) != str and int(id1) == id1 else __builtins__.str(id1)
            # id2 = __builtins__.str(int(id2)) if type(id2) != str and int(id2) == id2 else __builtins__.str(id2)
            # print(id1, id2)
            if id1 > id2:
                id1, id2 = id2, id1
            list_anno.append((id1, id2))

        for i in range(len(plot_pair)):
            id1, id2, outline_id = plot_pair.iloc[i]
            flag1 = False # if it is coverd by the plot_pair in list
            flag2 = False # if it is exist in the list
            for id1_, id2_ in list_anno:
                if id1 == id1_ and id2 == id2_:
                    flag1 = True
                    flag2 = True
                    break
                # id1_ is a prefix of id1 and id2_ is a prefix of id2
                if id1_.startswith(id1) and id2_.startswith(id2):
                    flag1 = True
                if id1_.startswith(id2) and id2_.startswith(id1):
                    flag1 = True
            dict_result["plot1_id"].append(id1)
            dict_result["plot2_id"].append(id2)
            dict_result["outline_id"].append(outline_id)
            if flag2:
                dict_result["type_byAnno"].append("contradict")
            elif flag1:
                dict_result["type_byAnno"].append("invalid")
            else:
                dict_result["type_byAnno"].append("not contradict")
    # print(dict_result)
    save2file(dict_result, output_path + "plot_contradict_anno.csv")
    # print the distribution by type_byAnno
    df_result = pd.DataFrame(dict_result)
    print(df_result.groupby("type_byAnno").count())

if __name__ == "__main__":
    # result_dir = "/home/yangk/zhiheng/develop_codeversion/fact-track/dataPostAnno/1001_pure_simple/"
    # generate_metaContent(["1001_pure_simple"], result_dir)
    # generate_plotContradictAnno(["1001_pure_simple"], result_dir)
    # generate_plotContradictPred(["1001_pure_simple"], result_dir)
    # from postAnno_contradictionAnalyze import plot_crossMatrix
    # plot_crossMatrix(result_dir)

    metaname_list = ["1010_pure_simple", "1011_pure_simple", "1012_pure_simple", "1013_pure_simple", "1014_pure_simple",
                        "1015_pure_simple", "1016_pure_simple", "1017_pure_simple", "1018_pure_simple"]

    # result_dir = "/home/yangk/zhiheng/develop_codeversion/fact-track/dataPostAnno/101x_pure_simple_llama2-7B_block=0.5/"
    # generate_metaContent(metaname_list, result_dir, suffix = "_detect_llama2-7B_block=0.5")
    # generate_plotContradictPred(metaname_list, result_dir)
    
    result_dir = "/home/yangk/zhiheng/develop_codeversion/fact-track/dataPostAnno/101x_pure_simple_llama2-7B_block=0.8_new/"
    generate_metaContent(metaname_list, result_dir, suffix = "_detect_llama2-7B_block=0.8")
    generate_plotContradictPred(metaname_list, result_dir)

    # result_dir = "/home/yangk/zhiheng/develop_codeversion/fact-track/dataPostAnno/101x_pure_simple_llama2-70B/"
    # generate_metaContent(metaname_list, result_dir, suffix = "_detect_llama2")
    # # generate_plotContradictAnno(metaname_list, result_dir)
    # generate_plotContradictPred(metaname_list, result_dir)
    # from postAnno_contradictionAnalyze import plot_crossMatrix
    # plot_crossMatrix(result_dir)